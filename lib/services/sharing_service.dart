import 'package:share_plus/share_plus.dart';
import 'package:url_launcher/url_launcher.dart';
import '../models/profile.dart';
import '../models/skill.dart';

class SharingService {
  static Future<void> shareProfile(Profile profile) async {
    final shareText = _buildShareText(profile);

    try {
      await SharePlus.instance.share(
        ShareParams(
          text: shareText,
          subject: 'Check out ${profile.personalInfo.fullName}\'s Profile',
        ),
      );
    } catch (e) {
      throw Exception('Failed to share profile: $e');
    }
  }

  static Future<void> shareProfileViaEmail(Profile profile) async {
    final emailSubject = 'Check out ${profile.personalInfo.fullName}\'s Profile';
    final emailBody = _buildShareText(profile);
    final emailUrl = 'mailto:?subject=${Uri.encodeComponent(emailSubject)}&body=${Uri.encodeComponent(emailBody)}';

    try {
      final Uri uri = Uri.parse(emailUrl);
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri);
      } else {
        throw Exception('Could not launch email client');
      }
    } catch (e) {
      throw Exception('Failed to share via email: $e');
    }
  }

  static Future<void> shareProfileViaLinkedIn(Profile profile) async {
    final shareText = _buildLinkedInShareText(profile);
    final linkedInUrl = 'https://www.linkedin.com/sharing/share-offsite/?url=${Uri.encodeComponent(shareText)}';

    try {
      final Uri uri = Uri.parse(linkedInUrl);
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri, mode: LaunchMode.externalApplication);
      } else {
        throw Exception('Could not launch LinkedIn');
      }
    } catch (e) {
      throw Exception('Failed to share via LinkedIn: $e');
    }
  }

  static Future<void> shareProfileViaTwitter(Profile profile) async {
    final shareText = _buildTwitterShareText(profile);
    final twitterUrl = 'https://twitter.com/intent/tweet?text=${Uri.encodeComponent(shareText)}';

    try {
      final Uri uri = Uri.parse(twitterUrl);
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri, mode: LaunchMode.externalApplication);
      } else {
        throw Exception('Could not launch Twitter');
      }
    } catch (e) {
      throw Exception('Failed to share via Twitter: $e');
    }
  }

  static String _buildShareText(Profile profile) {
    final buffer = StringBuffer();

    buffer.writeln('👋 Check out ${profile.personalInfo.fullName}\'s Profile!');
    buffer.writeln('');
    buffer.writeln('👨‍💼 ${profile.personalInfo.professionalTitle}');
    buffer.writeln('');
    buffer.writeln('📖 About:');
    buffer.writeln(profile.personalInfo.bio);
    buffer.writeln('');

    if (profile.skills.isNotEmpty) {
      buffer.writeln('🚀 Skills:');
      buffer.writeln(profile.skills.take(5).map((skill) => '• ${skill.name} (${skill.levelText})').join('\n'));
      if (profile.skills.length > 5) {
        buffer.writeln('• ... and ${profile.skills.length - 5} more');
      }
      buffer.writeln('');
    }

    if (profile.experiences.isNotEmpty) {
      buffer.writeln('💼 Experience:');
      final latestExperience = profile.experiences.first;
      buffer.writeln('• ${latestExperience.position} at ${latestExperience.companyName}');
      buffer.writeln('');

      if (profile.achievements.isNotEmpty) {
        buffer.writeln('🏆 Achievements:');
        buffer.writeln(profile.achievements.take(3).map((achievement) => '• ${achievement.title}').join('\n'));
        if (profile.achievements.length > 3) {
          buffer.writeln('• ... and ${profile.achievements.length - 3} more');
        }
        buffer.writeln('');
      }
    }

    buffer.writeln('📧 Contact: ${profile.personalInfo.email}');
    if (profile.personalInfo.phone.isNotEmpty) {
      buffer.writeln('📱 Phone: ${profile.personalInfo.phone}');
    }
    if (profile.personalInfo.location.isNotEmpty) {
      buffer.writeln('📍 Location: ${profile.personalInfo.location}');
    }

    buffer.writeln('');
    buffer.writeln('🔗 Connect with me:');
    for (final socialLink in profile.socialLinks) {
      buffer.writeln('• ${socialLink.displayName}: ${socialLink.url}');
    }

    buffer.writeln('');
    buffer.writeln('Generated by Personal Profile App');

    return buffer.toString();
  }

  static String _buildLinkedInShareText(Profile profile) {
    final buffer = StringBuffer();

    buffer.writeln('Check out ${profile.personalInfo.fullName}\'s professional profile!');
    buffer.writeln('');
    buffer.writeln(profile.personalInfo.professionalTitle);
    buffer.writeln('');
    buffer.writeln('Skills: ${profile.skills.take(3).map((skill) => skill.name).join(', ')}');
    if (profile.skills.length > 3) {
      buffer.writeln(' and ${profile.skills.length - 3} more');
    }
    buffer.writeln('');
    buffer.writeln('View full profile and achievements at: [Profile Link]');

    return buffer.toString();
  }

  static String _buildTwitterShareText(Profile profile) {
    final buffer = StringBuffer();

    buffer.writeln('🚀 Check out ${profile.personalInfo.fullName}\'s profile!');
    buffer.writeln('');
    buffer.writeln(profile.personalInfo.professionalTitle);
    buffer.writeln('');
    buffer.writeln('Skills: ${profile.skills.take(3).map((skill) => '#${skill.name}').join(' ')}');
    buffer.writeln('');
    buffer.writeln('#Profile #${profile.personalInfo.professionalTitle.replaceAll(' ', '')}');

    return buffer.toString();
  }

  static String generateProfileSummary(Profile profile) {
    return _buildShareText(profile);
  }

  static Map<String, dynamic> getProfileStats(Profile profile) {
    return {
      'totalSkills': profile.skills.length,
      'totalExperience': profile.experiences.length,
      'totalProjects': profile.projects.length,
      'totalAchievements': profile.achievements.length,
      'totalTestimonials': profile.testimonials.length,
      'totalSocialLinks': profile.socialLinks.length,
      'averageSkillLevel': _calculateAverageSkillLevel(profile.skills),
      'topSkillCategory': _getTopSkillCategory(profile.skills),
    };
  }

  static double _calculateAverageSkillLevel(List<Skill> skills) {
    if (skills.isEmpty) return 0.0;

    final levelValues = skills.map((skill) {
      switch (skill.level) {
        case SkillLevel.beginner:
          return 1.0;
        case SkillLevel.intermediate:
          return 2.0;
        case SkillLevel.advanced:
          return 3.0;
        case SkillLevel.expert:
          return 4.0;
      }
    }).whereType<double>();

    if (levelValues.isEmpty) return 0.0;

    return levelValues.reduce((a, b) => a + b) / levelValues.length;
  }

  static String _getTopSkillCategory(List<Skill> skills) {
    if (skills.isEmpty) return 'None';

    final categoryCount = <String, int>{};
    for (final skill in skills) {
      categoryCount[skill.category] = (categoryCount[skill.category] ?? 0) + 1;
    }

    return categoryCount.entries.reduce((a, b) => a.value > b.value ? a : b).key;
  }
}